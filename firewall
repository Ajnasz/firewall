#!/bin/sh

### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     S 2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start firewall
### END INIT INFO






#
# Copyright (c) 2005-2009 Ajnasz, Hungary
#
# Author: Lajos KOSZTI [Ajnasz] (ajnasz@gmail.com), 2005-2009
#
# /etc/init.d/firewall

# set here the configuration file path
. /lib/lsb/init-functions
CONFIG_FILE=/etc/firewall.conf


function displayHelp {
  log_success_msg "Usage: /etc/init.d/firewall {start|stop|restart}"
}
# globalis interface kinyerese
function getGlobIface {
  log_action_begin_msg "Start getGlobIface module";
  interfaces=$(sudo ifconfig -a | awk '/^[a-z]+/ && !/^lo/ {print $1}');

  for interface in $interfaces;do
    if [ "$(/sbin/ifconfig $interface | awk '/inet/ {print $2}' | cut -d":" -f2)" != "" ]; then
      GLOB_IFACE=$interface;
      break;
    fi
  done;
  log_action_end_msg 0;
}

# initialize firewall depedencies
function resetFW {
  rmModules;
  getGlobIface;
  loadModules;
  delRules;
}


# modulok betoltese
function loadModules {
  log_action_begin_msg "Start loadModules module";
  modprobe ip_tables;
  modprobe nf_conntrack_ftp;
  log_action_end_msg 0;
}

function rmModules {
  log_action_begin_msg "Start rmModules module";
  rmmod nf_conntrack_ftp &> /dev/null
  rmmod iptable_mangle &> /dev/null
  rmmod iptable_filter &> /dev/null
  rmmod iptable_raw &> /dev/null
  rmmod iptable_nat &> /dev/null
  rmmod iptable_filter &> /dev/null
  rmmod ip_tables &> /dev/null
  log_action_end_msg 0;

}

# osszes szabaly torlese
function delRules {
  log_action_begin_msg "Start delRules module";
  $IPTABLES -P INPUT ACCEPT;
  $IPTABLES -P FORWARD ACCEPT;
  $IPTABLES -P OUTPUT ACCEPT;
  for table in filter mangle nat raw; do
    $IPTABLES -t $table -F;
    $IPTABLES -t $table -X;
  done;
  log_action_end_msg 0;
}


# input lanc alapertelmezett szabalyai
function initInput {
  log_action_begin_msg "Start initInput module";
  $IPTABLES -A INPUT -m state --state INVALID -j DROP;
  $IPTABLES -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT;
  $IPTABLES -A INPUT -i lo -m state --state NEW -j ACCEPT;
  log_action_end_msg 0;
}

function closeInput {
  $IPTABLES -A INPUT -j DROP;
}

# output lanc alapertelmezett szabalyai
function initOutput {
  log_action_begin_msg "Start initOutput module";
  $IPTABLES -P OUTPUT DROP;
  $IPTABLES -A OUTPUT -m state --state INVALID -j DROP;
  $IPTABLES -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT;
  $IPTABLES -A OUTPUT -o lo -j ACCEPT;
  log_action_end_msg 0;
}

function closeOutput {
  $IPTABLES -A OUTPUT -j DROP;
}

function outputAllowedPorts {
  $IPTABLES -A OUTPUT -p icmp -j ACCEPT;
  for port in $ALLOWED_OUT_TCP_PORTS
    do
    $IPTABLES -A OUTPUT -o $GLOB_IFACE -p tcp --dport $port -j ACCEPT;
  done
  for port in $ALLOWED_OUT_UDP_PORTS
    do
    $IPTABLES -A OUTPUT -o $GLOB_IFACE -p udp --dport $port -j ACCEPT;
  done
#  $IPTABLES -A OUTPUT -j LOG --log-prefix "$LOG_PREFIX:output:";
}

# internet megosztas
function shareNet {
  log_action_begin_msg "Start shareNet module";
  echo 1 > /proc/sys/net/ipv4/ip_forward;
  $IPTABLES -t nat -A POSTROUTING -o eth1 -j MASQUERADE;
  SHARENET=1
  log_action_end_msg 0;
}

# icmp csomagok szurese
function allowIcmpIn {
  log_action_begin_msg "Start allowIcmpIn module";
# http://debianszerver.hu/firewall/index.php
  $IPTABLES -A INPUT -i $GLOB_IFACE -p icmp --fragment -j DROP;
  $IPTABLES -A INPUT -i $GLOB_IFACE -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT;
  $IPTABLES -A INPUT -i $GLOB_IFACE -p icmp --icmp-type echo-request -j DROP;
  $IPTABLES -A INPUT -i $GLOB_IFACE -p icmp -j ACCEPT;
  log_action_end_msg 0;
}

function allowSSH {
  log_action_begin_msg "\Start allowSSH module";
  if [ -z $ALLOWED_SSH_IPS ]; then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -m state --state NEW -m recent --name SSH_CONN --set;
    if [ $LOGGING -eq 1 ];then
      $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -m state --state NEW -m recent --name SSH_CONN --update --seconds 120 --hitcount 3 -j LOG --log-prefix "$LOG_PREFIX:ssh-conn:" --log-level=$LOG_LEVEL;
    fi
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -m state --state NEW -m recent --name SSH_CONN --update --seconds 120 --hitcount 3 -j DROP;
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -m state --state NEW -j ACCEPT;

  else
    for ip in $ALLOWED_SSH_IPS
      do
      $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -s $ip -m state --state NEW -m recent --name SSH_CONN --set;
      if [ $LOGGING -eq 1 ];then
        $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -s $ip -m state --state NEW -m recent --name SSH_CONN --update --seconds 120 --hitcount 3 -j LOG --log-prefix "$LOG_PREFIX:ssh-conn:" --log-level=$LOG_LEVEL;
      fi
      $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -s $ip -m state --state NEW -m recent --name SSH_CONN --update --seconds 120 --hitcount 3 -j DROP;
      $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $SSH_PORT -s $ip -m state --state NEW -j ACCEPT;

    done
  fi
  log_action_end_msg 0;
}

function portSD {
  log_action_begin_msg "Start portSD module";
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -m psd -j LOG --log-level=$LOG_LEVEL --log-prefix "$LOG_PREFIX:psd:";
  fi
  $IPTABLES -A INPUT -m psd -j DROP;
  log_action_end_msg 0;
}

function attack {

  log_action_begin_msg "Start attack module";
  # NULL-SCAN
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL NONE -j LOG --log-prefix "$LOG_PREFIX:Null-Scan:" --log-level=$LOG_LEVEL;
  fi
  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL NONE -j DROP

  # XMAS-SCAN
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL ALL -j LOG --log-prefix "$LOG_PREFIX:Xmas-Scan:" --log-level=$LOG_LEVEL;
  fi
  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL ALL -j DROP;

  # SYNFIN-SCAN
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL SYN,FIN -j LOG --log-prefix "$LOG_PREFIX:SynFin-Scan:" --log-level=$LOG_LEVEL;
  fi
  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL SYN,FIN -j DROP;

  # NMAP-XMAS-SCAN
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL URG,PSH,FIN -j LOG --log-prefix "$LOG_PREFIX:Nmap-Xmas-Scan:" --log-level=$LOG_LEVEL;
  fi
  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL URG,PSH,FIN -j DROP;

  # FIN-SCAN
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL FIN -j LOG --log-prefix "$LOG_PREFIX:Fin-Scan:" --log-level=$LOG_LEVEL;
  fi
  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL FIN -j DROP;

  # NMAP-ID
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -j LOG --log-prefix "$LOG_PREFIX:Nmap-Id:" --log-level=$LOG_LEVEL;
  fi
  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -j DROP;

  # SYN-RST
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags SYN,RST SYN,RST -j LOG --log-prefix "$LOG_PREFIX:Syn-Rst:" --log-level=$LOG_LEVEL;
  fi
  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --tcp-flags SYN,RST SYN,RST -j DROP;

# syn-flood
#  $IPTABLES -N syn-flood;
#  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --syn -j syn-flood;
#  $IPTABLES -A syn-flood -i $GLOB_IFACE -p tcp -m limit --limit 3/s --limit-burst 4 -j RETURN;
#  if [ $LOGGING -eq 1 ];then
#    $IPTABLES -A syn-flood -i $GLOB_IFACE -j LOG --log-prefix "$LOG_PREFIX:SYN-FLOOD:" --log-level=$LOG_LEVEL;
#  fi
#  $IPTABLES -A syn-flood -i $GLOB_IFACE -j DROP;

# new con without syn
#  if [ $LOGGING -eq 1 ];then
#    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp ! --syn -m state --state NEW -j LOG --log-level=$LOG_LEVEL --log-prefix "$LOG_PREFIX:new-wo-syn";
#  fi
#  $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp ! --syn -m state --state NEW -j DROP;
  log_action_end_msg 0;
}


function allowedInPorts {
  log_action_begin_msg "Start allowedInPorts module";
  # $IPTABLES -A INPUT -s 192.168.1.0/24 -p tcp --dport 3000 -j ACCEPT
  # $IPTABLES -A INPUT -s 192.168.131.0/24 -p tcp --dport 3000 -j ACCEPT
  for i in $ALLOWED_IN_TCP_PORTS
    do
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $i -m state --state NEW -j ACCEPT;
  done
  for i in $ALLOWED_IN_UDP_PORTS
    do
    $IPTABLES -A INPUT -i $GLOB_IFACE -p udp --dport $i -m state --state NEW -j ACCEPT;
  done
  log_action_end_msg 0;
}


function logUnclean {
  log_action_begin_msg "Start logUnclean module";
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT -m unclean -j LOG --log-prefix "$LOG_PREFIX:unclean:" --log-level=$LOG_LEVEL;
  fi
  log_action_end_msg 0;
}

function allowInMultiport {
  log_action_begin_msg "Start allowMultiport module";
  for i in $ALLOWED_IN_MULTIPORT
    do
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $i -m state --state NEW -j ACCEPT;
  done
  log_action_end_msg 0;
}

function forceProxy {
  $IPTABLES -t nat -A  POSTROUTING -o $GLOB_IFACE -p tcp --dport 80 -j SNAT --to-source 10.1.0.1:3128
}

function dnat {
  $IPTABLES -t nat -A PREROUTING -i $GLOB_IFACE -p tcp --dport $1 -j DNAT --to-destination $2;
}

function dropTcpPorts {
  for i in $DROPPED_PORTS
    do
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $i -j DROP;
  done
}

function rejectTcpPorts {
  for i in $REJECT_TCP_PORTS
    do
    $IPTABLES -A INPUT -i $GLOB_IFACE -p tcp --dport $i -j REJECT;
    echo "reject $i";
  done
}

function logDrop {
  if [ $LOGGING -eq 1 ];then
    $IPTABLES -A INPUT ! -p udp -j LOG --log-prefix "$LOG_PREFIX:log-drop";
  fi
}

function cups {
  if [ $ENABLE_CUPS_SNMP -eq 1 ]; then
    # http://www.mail-archive.com/scientific-linux-users@listserv.fnal.gov/msg02910.html
    $IPTABLES -A OUTPUT -p udp --dport 161 -m recent --name cups_snmp --rsource --set -j ACCEPT
    $IPTABLES -A INPUT -p udp --sport 161 -m recent --name cups_snmp --rdest --rcheck -j ACCEPT
  fi
}

function setOutTcpPorts {

# TEMP=`getopt -o ab:c:: --long a-long,b-long:,c-long:: -n 'example.bash' -- "$@"`

  #while getopt --longoptions "ftp:,ssh:,smtp:,dns:,https:,nfs:,smtptls:,imapssl:,pop3s:,msn:,gtalk:,mpd:,irc:,azureus-swing:,skype:,ports:" Option; do
  while [ "$#" -gt "0" ]
  do
    case "$1" in
      'azureus-swing') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 6883";;
      'ftp') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 20 21";;
      'gtalk') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 5222 5223";;
      'http') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 80";;
      'https') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 443";;
      'imapssl') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 993";;
      'irc') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 6667";;
      'mpd') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 6600";;
      'msn') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 1863";;
      'pop3s') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 995";;
      'skype') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 23399";;
      'smb') ALLOWED_OUT_UDP_PORTS="$ALLOWED_OUT_UDP_PORTS137 138 139 445";;
      'smtp') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 25";;
      'smtptls') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 587";;
      'ssh') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 22";;
      'whois') ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 43";;
      'nfs')
        ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 111 2049"
        ALLOWED_OUT_UDP_PORTS="$ALLOWED_OUT_UDP_PORTS 111 2049"
        ;;
      'dns')
        ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 53"
        ALLOWED_OUT_UDP_PORTS="$ALLOWED_OUT_UDP_PORTS 53"
        ;;
      'ntp')
        ALLOWED_OUT_TCP_PORTS="$ALLOWED_OUT_TCP_PORTS 123"
        ALLOWED_OUT_UDP_PORTS="$ALLOWED_OUT_TCP_PORTS 123"
        ;;
     # '--ports')
     # ;;
    esac;
    shift;
  done;
}

###############################  Tuzfal konfiguracio ###############################

. $CONFIG_FILE
setOutTcpPorts $ALLOWED_SERVICES_TO_CONNECT

##############################  Tuzfal konfiguracio end #############################

function startFW {
    resetFW;
    if [ $SHARENET -eq 1 ];then
      shareNet
#     dnat 2000 172.16.111.212;
    fi
#    logUnclean;
    initInput;
    if [ $FILTER_OUTGOING -eq 1 ]; then
      initOutput;
      outputAllowedPorts;
      closeOutput;
    fi
    dropTcpPorts;
    rejectTcpPorts;
    attack;
    allowIcmpIn;
    if [ $ALLOW_SSH -eq 1 ];then
      allowSSH;
    fi
    allowedInPorts;
    cups;
    logDrop;
    closeInput;
}


##############################################################################
#################  Tuzfal -- Tuzfal -- Tuzfal -- Tuzfal --  ##################
##############################################################################

while [ "$#" -gt "0" ]
do
  case "$1" in
  'start' | 'restart')
    log_begin_msg "Starting Ajnasz's Firewall" "netfilter";
    startFW
  ;;


  'stop')
    log_begin_msg "Stop Ajnasz's Firewall" "netfilter";
    resetFW;
  ;;

  '--help' | '-h')
    displayHelp;
  ;;

  *)
    displayHelp;
  ;;
  esac
  shift;
done;


log_end_msg 0;
